
	
	/*
	w->nbrows  = 3; w->nbcolumns  = 3; //Case 1
	w->sx = 0; w->sy = 1;
	w->dx = 2; w->dy = 2;
	*/
	
	w->nbrows  = 5; w->nbcolumns  = 5; //Case 2
	w->sx = 0; w->sy = 1;
	w->dx = 2; w->dy = 2;
	
	init (w);
	
		
//////////////////random test///////////////////////
	
	int t,c;
	t = w->nbrows * w->nbcolumns / 5;
	srand (time(NULL));
	for (c = 0; c < t; c++) {
		i= rand()%(w->nbrows);
		j=rand()%(w->nbcolumns);
		w->grid[i][j] = -1;
	}
	
///////////////////////////////////////////////////
	
//////////////////test 1///////////////////////////
	/*
	
	w->grid[1][1]=-1;
	w->grid[2][1]=-1;
	w->grid[w->dx][w->dy]=1;  // Needed for the algo to work correctly
	for(i=0;i<w->nbrows;i++)
		for(j=0;j<w->nbcolumns;j++)
			if(w->grid[i][j]==-1)
				w->distance[i][j]=-1;  //the obstacles cannot be reached
	*/
///////////////////////////////////////////////////
	
//////////////////test 2///////////////////////////
	/*
	w->grid[1][1]=-1;
	w->grid[1][2]=-1;
	w->grid[1][3]=-1;
	w->grid[2][1]=-1;
	w->grid[3][1]=-1;
	w->grid[3][2]=-1;
	w->grid[3][3]=-1;
	
	for(i=0;i<w->nbrows;i++)
		for(j=0;j<w->nbcolumns;j++)
			if(w->grid[i][j]==-1)
				w->distance[i][j]=-1;  //the obstacles cannot be reached	
	*/
///////////////////////////////////////////////////
				
//////////////////test 3///////////////////////////
	/*
	w->grid[1][1]=-1;
	w->grid[1][2]=-1;
	w->grid[1][3]=-1;
	w->grid[2][1]=-1;
	w->grid[2][3]=-1;
	w->grid[3][1]=-1;
	w->grid[3][2]=-1;
	w->grid[3][3]=-1;
    
	w->grid[w->dx][w->dy]=1;  // Needed for the algo to work correctly
	for(i=0;i<w->nbrows;i++)
		for(j=0;j<w->nbcolumns;j++)
			if(w->grid[i][j]==-1)
				w->distance[i][j]=-1;  //the obstacles cannot be reached	
	*/
///////////////////////////////////////////////////
